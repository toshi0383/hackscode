// Generated using Sourcery 0.13.1 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT


// Generated by using CoreCLI version 0.1.x

import CoreCLI

// - MARK: Initializers

extension CreateAndAddNewFileCommand.Argument {
    private typealias Base = CreateAndAddNewFileCommand.Argument

    private static var autoMappedOptions: [PartialKeyPath<Base>: String] {
        return [
            \Base.toTarget: "--to-target",
            \Base.filepath: "--filepath",
            \Base.underGroup: "--under-group",
        ]
    }

    private static var autoMappedFlags: [KeyPath<Base, Bool>: String] {
        return [
:        ]
    }

    init(parser: ArgumentParserType) throws {

        func getOptionValue(keyPath: PartialKeyPath<Base>) throws -> String {
            if let short = Base.shortHandOptions[keyPath],
                let value = try? parser.getValue(forOption: "-\(short)") {
                return value
            }
            let long = Base.autoMappedOptions[keyPath]!
            return try parser.getValue(forOption: long)
        }

        func getFlag(keyPath: KeyPath<Base, Bool>) -> Bool {
            if let short = Base.shortHandFlags[keyPath] {
                let value = parser.getFlag("-\(short)")
                if value {
                    return true
                }
            }
            let long = Base.autoMappedFlags[keyPath]!
            return parser.getFlag(long)
        }

        self.toTarget = try getOptionValue(keyPath: \Base.toTarget)
        self.filepath = try getOptionValue(keyPath: \Base.filepath)
        self.underGroup = try getOptionValue(keyPath: \Base.underGroup)
    }
}

extension RemoveBuildFileCommand.Argument {
    private typealias Base = RemoveBuildFileCommand.Argument

    private static var autoMappedOptions: [PartialKeyPath<Base>: String] {
        return [
            \Base.fromTarget: "--from-target",
            \Base.matching: "--matching",
            \Base.excluding: "--excluding",
        ]
    }

    private static var autoMappedFlags: [KeyPath<Base, Bool>: String] {
        return [
            \Base.verbose: "--verbose",
        ]
    }

    init(parser: ArgumentParserType) throws {

        func getOptionValue(keyPath: PartialKeyPath<Base>) throws -> String {
            if let short = Base.shortHandOptions[keyPath],
                let value = try? parser.getValue(forOption: "-\(short)") {
                return value
            }
            let long = Base.autoMappedOptions[keyPath]!
            return try parser.getValue(forOption: long)
        }

        func getFlag(keyPath: KeyPath<Base, Bool>) -> Bool {
            if let short = Base.shortHandFlags[keyPath] {
                let value = parser.getFlag("-\(short)")
                if value {
                    return true
                }
            }
            let long = Base.autoMappedFlags[keyPath]!
            return parser.getFlag(long)
        }

        self.fromTarget = try getOptionValue(keyPath: \Base.fromTarget)
        self.matching = try getOptionValue(keyPath: \Base.matching)
        self.excluding = try getOptionValue(keyPath: \Base.excluding)
        self.verbose = getFlag(keyPath: \Base.verbose)
    }
}

