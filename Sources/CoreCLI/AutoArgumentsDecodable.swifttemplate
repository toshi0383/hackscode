// Generated by using CoreCLI version 0.1.x

import CoreCLI

// - MARK: Initializers

<%_ for type in types.types { -%>
<%_ if type.implements["AutoArgumentsDecodable"] != nil || type.annotations["AutoArgumentsDecodable"] != nil { -%>
extension <%= type.name %> {
    private typealias Base = <%= type.name %>

    private static var autoMappedOptions: [PartialKeyPath<Base>: String] {
        return [
            <%_ var count1 = 0 -%>
            <%_ for variable in type.storedVariables { -%>
            <%_ if ["String", "String?"].contains(variable.typeName.name) { -%>
            <%_ count1 += 1 -%>
            \Base.<%= variable.name %>: "<%= variable.name.enumerated().map({ let c = String($0.element).lowercased(); let isUpper = String($0.element) != c; return $0.offset == 0 ? "--\(c)" : isUpper ? "-\(c)" : c }).joined() %>",
            <%_ } -%>
            <%_ } -%>
            <%_ if count1 == 0 { -%><%= ":" %><%_ } -%>
        ]
    }

    private static var autoMappedFlags: [KeyPath<Base, Bool>: String] {
        return [
            <%_ var count2 = 0 -%>
            <%_ for variable in type.storedVariables { -%>
            <%_ if variable.typeName.name == "Bool" { -%>
            <%_ count2 += 1 -%>
            \Base.<%= variable.name %>: "<%= variable.name.enumerated().map({ let c = String($0.element).lowercased(); let isUpper = String($0.element) != c; return $0.offset == 0 ? "--\(c)" : isUpper ? "-\(c)" : c }).joined() %>",
            <%_ } -%>
            <%_ } -%>
            <%_ if count2 == 0 { -%><%= ":" %><%_ } -%>
        ]
    }

    init(parser: ArgumentParserType, subCommands: [CommandType.Type]) throws {

        func getOptionValue(keyPath: PartialKeyPath<Base>) throws -> String {
            if let short = Base.shortHandOptions[keyPath],
                let value = try? parser.getValue(forOption: "-\(short)") {
                return value
            }
            let long = Base.autoMappedOptions[keyPath]!
            return try parser.getValue(forOption: long)
        }

        func getFlag(keyPath: KeyPath<Base, Bool>) -> Bool {
            if let short = Base.shortHandFlags[keyPath] {
                let value = parser.getFlag("-\(short)")
                if value {
                    return true
                }
            }
            let long = Base.autoMappedFlags[keyPath]!
            return parser.getFlag(long)
        }

        func getCommandType() -> CommandType.Type? {
            return subCommands.first(where: { $0.name == parser.shift() })
        }

        <%_ for variable in type.storedVariables { -%>
        <%_ if variable.typeName.name == "String" { -%>
        self.<%= variable.name %> = try getOptionValue(keyPath: \Base.<%= variable.name %>)
        <%_ } -%>
        <%_ } -%>
        <%_ for variable in type.storedVariables { -%>
        <%_ if variable.typeName.name == "String?" { -%>
        self.<%= variable.name %> = try? getOptionValue(keyPath: \Base.<%= variable.name %>)
        <%_ } -%>
        <%_ } -%>
        <%_ for variable in type.storedVariables { -%>
        <%_ if variable.typeName.name == "Bool" { -%>
        self.<%= variable.name %> = getFlag(keyPath: \Base.<%= variable.name %>)
        <%_ } -%>
        <%_ } -%>
        <%_ for variable in type.storedVariables { -%>
        <%_ if variable.typeName.name == "CommandType?" { -%>
        if let type = getCommandType() {
            self.<%= variable.name %> = try? type.init(arguments: parser.shiftAll())
        } else {
            self.<%= variable.name %> = nil
        }
        <%_ } -%>
        <%_ } -%>
    }
}

<%_ } -%>
<%_ } -%>
